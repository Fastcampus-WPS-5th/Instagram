"""
1. pyenv virtualenv 3.6.1 instagram
2. pyenv local instagram
3. pip install django ipython django_extensions
4. django-admin startproject instagram
5. mv instagram django_app
6. pip freeze > requirements.txt
7. git init
8. cp <이전 gitignore위치> .
9. git add -A & git commit -m 'First commit'
10. Pycharm Interpreter설정


모듈 모음
    회원 관리 모듈 (member/)
        로그인
        회원가입
        팔로우
        친구찾기
        친구추천
        개인페이지
            내가 올린 글
            내 정보 관리

    글 관련 모듈 (post/)
        뉴스피드
        사진업로드
        댓글달기
        좋아요누르기
        태그달기


    알림 관련 모듈 (noti/)
        팔로워의 글 등록 알림
        댓글 알림



Django settings for instagram project.

Generated by 'django-admin startproject' using Django 1.11.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/

1. TEMPLATE_DIR에 instagram/django_app/templates폴더를 생성 후 해당 경로를 지정
2. TEMPLATES의 DIRS리스트 설정에 위 변수 삽입
3. templates디렉토리의 post/post_list.html생성
4. post_list.html에서 for loop사용해 전달된 posts변수 순환 및 출력
5. post_list view가 /post/에 접근시 출력되도록 post/urls.py에 설정
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# django_app/templates
TEMPLATE_DIR = os.path.join(BASE_DIR, 'templates')
# django_app/static
STATIC_DIR = os.path.join(BASE_DIR, 'static')

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/
STATICFILES_DIRS = [
    STATIC_DIR,
]
STATIC_URL = '/static/'
MEDIA_URL = '/media/'
# django_app/media
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Custom User (default: auth.User)
AUTH_USER_MODEL = 'member.User'
LOGIN_URL = 'member:login'

# Facebook
FACEBOOK_APP_ID = '1714579385238490'
FACEBOOK_SECRET_CODE = '4bf87e8bf3a942a4d83123482b0b74ae'

# CORS
# CORS_ORIGIN_ALLOW_ALL = True
CORS_ORIGIN_WHITELIST = (
    'null',
    'localhost:3001',
)

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'corsheaders',
    'django_extensions',
    'rest_framework',

    'post',
    'member',
    'utils',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            TEMPLATE_DIR,
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                # Custom context processors
                'member.context_processors.forms',
                'utils.context_processors.facebook_info',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'instagram',
        'USER': 'lhy',
        'PASSWORD': 'dlgksdud',
        'HOST': 'localhost',
        'PORT': '5432',
    },
    'sqlite': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '*02@a!af_(u@b1jpq@w^px=^mq+r#&&khuzzor60_3&zc^g5#7'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_USE_TLS = True
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = 'fastcampus.2016@gmail.com'
EMAIL_HOST_PASSWORD = '비밀'
EMAIL_PORT = 587

# Celery
CELERY_BROKER_URL = 'redis://localhost:6379/'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/'

# DRF
REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    )
}
